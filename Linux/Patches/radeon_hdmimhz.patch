diff -ruN orig/drivers/gpu/drm/radeon/radeon.h new/drivers/gpu/drm/radeon/radeon.h
--- orig/drivers/gpu/drm/radeon/radeon.h	2021-06-27 23:21:11.000000000 +0100
+++ new/drivers/gpu/drm/radeon/radeon.h	2021-09-04 07:59:21.471496000 +0100
@@ -116,6 +116,7 @@
 extern int radeon_backlight;
 extern int radeon_auxch;
 extern int radeon_mst;
+extern int radeon_hdmimhz;
 extern int radeon_uvd;
 extern int radeon_vce;
 extern int radeon_si_support;
diff -ruN orig/drivers/gpu/drm/radeon/radeon_connectors.c new/drivers/gpu/drm/radeon/radeon_connectors.c
--- orig/drivers/gpu/drm/radeon/radeon_connectors.c	2021-06-27 23:21:11.000000000 +0100
+++ new/drivers/gpu/drm/radeon/radeon_connectors.c	2021-09-04 08:09:13.766021000 +0100
@@ -1482,6 +1482,7 @@
 	struct drm_device *dev = connector->dev;
 	struct radeon_device *rdev = dev->dev_private;
 	struct radeon_connector *radeon_connector = to_radeon_connector(connector);
+	int mode_valid = MODE_OK;
 
 	/* XXX check mode bandwidth */
 
@@ -1489,7 +1490,7 @@
 	if (radeon_connector->use_digital &&
 	    (rdev->family == CHIP_RV100) &&
 	    (mode->clock > 135000))
-		return MODE_CLOCK_HIGH;
+		return MODE_CLOCK_HIGH;		// never override since this is a known issue
 
 	if (radeon_connector->use_digital && (mode->clock > 165000)) {
 		if ((radeon_connector->connector_object_id == CONNECTOR_OBJECT_ID_DUAL_LINK_DVI_I) ||
@@ -1499,19 +1500,22 @@
 		else if (ASIC_IS_DCE6(rdev) && drm_detect_hdmi_monitor(radeon_connector_edid(connector))) {
 			/* HDMI 1.3+ supports max clock of 340 Mhz */
 			if (mode->clock > 340000)
-				return MODE_CLOCK_HIGH;
+				mode_valid = MODE_CLOCK_HIGH;
 			else
 				return MODE_OK;
 		} else {
-			return MODE_CLOCK_HIGH;
+			mode_valid = MODE_CLOCK_HIGH;
 		}
 	}
 
+		if (radeon_hdmimhz > 0 && (mode->clock <= radeon_hdmimhz * 1000))
+			mode_valid = MODE_OK;
+
 	/* check against the max pixel clock */
 	if ((mode->clock / 10) > rdev->clock.max_pixel_clock)
-		return MODE_CLOCK_HIGH;
+		mode_valid = MODE_CLOCK_HIGH;
 
-	return MODE_OK;
+	return mode_valid;
 }
 
 static const struct drm_connector_helper_funcs radeon_dvi_connector_helper_funcs = {
diff -ruN orig/drivers/gpu/drm/radeon/radeon_drv.c new/drivers/gpu/drm/radeon/radeon_drv.c
--- orig/drivers/gpu/drm/radeon/radeon_drv.c	2021-09-04 08:17:57.272718000 +0100
+++ new/drivers/gpu/drm/radeon/radeon_drv.c	2021-09-04 08:12:44.461496000 +0100
@@ -174,6 +174,7 @@
 int radeon_backlight = -1;
 int radeon_auxch = -1;
 int radeon_mst = 0;
+int radeon_hdmimhz = 0;
 int radeon_uvd = 1;
 int radeon_vce = 1;
 
@@ -267,6 +268,9 @@
 MODULE_PARM_DESC(mst, "DisplayPort MST experimental support (1 = enable, 0 = disable)");
 module_param_named(mst, radeon_mst, int, 0444);
 
+MODULE_PARM_DESC(hdmimhz, "Force a maximum HDMI pixel clock (in MHz); try 165/225/297/330 to overclock your TMDS for gaining a higher resolution.");
+module_param_named(hdmimhz, radeon_hdmimhz, int, 0444);
+
 MODULE_PARM_DESC(uvd, "uvd enable/disable uvd support (1 = enable, 0 = disable)");
 module_param_named(uvd, radeon_uvd, int, 0444);
 
diff -ruN orig/drivers/gpu/drm/radeon/radeon_encoders.c new/drivers/gpu/drm/radeon/radeon_encoders.c
--- orig/drivers/gpu/drm/radeon/radeon_encoders.c	2021-06-27 23:21:11.000000000 +0100
+++ new/drivers/gpu/drm/radeon/radeon_encoders.c	2021-09-04 08:14:18.881261000 +0100
@@ -370,6 +370,9 @@
 	struct radeon_connector *radeon_connector;
 	struct radeon_connector_atom_dig *dig_connector;
 
+	if(radeon_hdmimhz > 0)
+		return false;
+
 	connector = radeon_get_connector_for_encoder(encoder);
 	/* if we don't have an active device yet, just use one of
 	 * the connectors tied to the encoder.
